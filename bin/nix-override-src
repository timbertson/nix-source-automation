#!/usr/bin/env python3
import os, sys, subprocess
here = os.path.dirname(__file__)

class Object(object): pass
def usage(status=1):
	print("Usage: TODO...", file=sys.stderr)
	sys.exit(status)

def parse():
	args = sys.argv[1:]
	def extract(opt, has_arg=True):
		try:
			idx = args.index(opt)
		except ValueError:
			return None
		args.pop(idx)
		if has_arg:
			return args.pop(idx)
		else:
			return True

	if extract('--help', has_arg=False):
		usage(0)

	opts = Object()
	opts.src = extract('--src')
	# opts.rev = extract('--rev')
	# opts.unpack = extract('--unpack', False)
	opts.drv = extract('--drv')
	# opts.type = extract('--type') or 'git'
	opts.exe = extract('--exe') or 'nix-build'
	return (opts, args)

opts, args = parse()
if not opts.src: usage()

#TODO: check actual store path
if not opts.src.startswith('/nix/store'):
	print("Warn: src is not in the nix store, this may be inefficient", file=sys.stderr)

# #TODO: check actual store path
# if not opts.src.startswith('/nix/store'):
# 	if opts.type == 'path':
# 		cmd = ['nix-store', '--add', opts.src]
# 	elif opts.type == 'git':
# 		cmd = [
# 			os.path.join(here, 'nix-impure'),
# 			'-A', 'exportWorkspace',
# 			os.path.join(here, '..', 'nix', 'default.nix'),
# 		]
# 		if opts.rev:
# 			cmd.extend(['--argstr', 'rev', opts.rev])
# 		if opts.unpack:
# 			cmd.extend(['--arg', 'unpack', 'true'])
# 		cmd.extend(['--argstr', 'dir', opts.src])
# 	else:
# 		usage()
# 	opts.src = subprocess.check_output(cmd).strip()

if not opts.drv:
	opts.drv = subprocess.check_output(
		['nix-instantiate', '--quiet', '--show-trace'] + args
	).strip()
else:
	assert len(args) == 0

cmd = [opts.exe,
	'-A', 'overrideSrc',
	'--show-trace',
	'--argstr', 'src', opts.src,
	'--argstr', 'drv', opts.drv,
	os.path.join(here, '..', 'nix', 'default.nix'),
]
os.execvp(cmd[0], cmd)
