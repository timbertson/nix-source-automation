#!/usr/bin/env python3
import os, sys, subprocess, optparse
here = os.path.dirname(__file__)

def main():
	def parse():
		p = optparse.OptionParser()
		p.add_option('--ref')
		p.add_option('--commit')
		p.add_option('--unpack', action='store_true')
		p.add_option('--working-changes', action='store_true')
		return p.parse_args()

	opts, args = parse()
	if len(args) > 0:
		assert len(args) == 1
		path = args[0]
	else:
		path = '.'

	def to_nix(name, value):
		if value is None:
			return ['--arg', name, 'null']
		elif isinstance(value, bool):
			return ['--arg', name, str(value).lower()]
		elif isinstance(value, str):
			return ['--argstr', name, value]
		else:
			assert False

	def print_cmd(cmd):
		print('+ %s' % ' '.join(cmd), file=sys.stderr)

	nix_args = ([
		'--argstr', 'path', os.path.abspath(path) ]
		+ to_nix('ref', opts.ref)
		+ to_nix('commit', opts.commit)
		+ to_nix('unpack', bool(opts.unpack))
		+ to_nix('workingChanges', bool(opts.working_changes))
		+ [
		'-A', 'exportLocalGit',
		'--show-trace',
		os.path.join(here, '..', 'nix', 'default.nix'),
	])

	if opts.working_changes:
		cmd = [ os.path.join(here, 'nix-impure') ] + nix_args
	else:
		cmd = ['nix-build'] + nix_args

	print_cmd(cmd)
	os.execvp(cmd[0], cmd)

if __name__ == '__main__':
	main()
